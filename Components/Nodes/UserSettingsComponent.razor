<section class="user-settings">
    <h3>UserSettings</h3>

    <p>
        Ciemny Motyw @DarkTheme:

        @if (DarkTheme == "true")
        {
            <input type="checkbox" checked @onclick='() => ChangeSetting("DarkTheme", ref DarkTheme, "false")' />
        }
        else
        {
            <input type="checkbox" @onclick='() => ChangeSetting("DarkTheme", ref DarkTheme, "true")' />
        }
    </p>

    <p>
        Tryb desktopowy @DesktopMode:
        @if (DesktopMode == "true") { <input type="checkbox" checked @onclick='() => ChangeSetting("DesktopMode", ref DesktopMode, "false")' /> }
        else { <input type="checkbox" @onclick='() => ChangeSetting("DesktopMode", ref DesktopMode, "true")' /> }
    </p>

    <p>
        Rozmiar czcionki: @FontSize
        <button @onclick='() => ChangeSetting("FontSize", ref FontSize, (Convert.ToInt16(FontSize)-1).ToString())'>-</button>
        <button @onclick='() => ChangeSetting("FontSize", ref FontSize, (Convert.ToInt16(FontSize)+1).ToString())'>+</button>
    </p>


    @foreach (var item in showInfo)
    {
        <p>@item.Key : @item.Value</p>
    }

</section>


@code {
    const string filePath = "usersettings.json";

    public Dictionary<string, string> showInfo;
    public string DarkTheme;
    public string DesktopMode;
    public string FontSize;


    protected override void OnInitialized()
    {
        // WriteToJsonFile(UserSettings);
        showInfo = ReadListFromJsonFile(filePath);

        DarkTheme = showInfo["DarkTheme"];
        DesktopMode = showInfo["DesktopMode"];
        FontSize = (showInfo["FontSize"]);
    }

    //Zapisywanie ustawień do pliku JSON
    public void WriteToJsonFile(Dictionary<string, string> data)
    {
        var options = new JsonSerializerOptions { WriteIndented = true };
        string jsonString = JsonSerializer.Serialize(data, options);
        File.WriteAllText(filePath, jsonString);
    }
    //Odczytywanie ustawień z pliku JSON
    public Dictionary<string, string> ReadListFromJsonFile(string filePath)
    {
        string jsonString = File.ReadAllText(filePath);
        return JsonSerializer.Deserialize<Dictionary<string, string>>(jsonString);
    }

    //Zmiana ustawienia
    public void ChangeSetting(string name, ref string variable, string value)
    {
        if (variable is null)
        {
            throw new ArgumentNullException(nameof(variable));
        }
        else
        {
            variable = value;
            showInfo[name] = value;
            WriteToJsonFile(showInfo);
        }
    }
}
